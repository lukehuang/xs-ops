#!/bin/sh

set -x
set -v

# SYNOPSIS
# This script is called from the XenServer automated install and bootstraps
# the entry point for the autostack scripts to be run within the host on
# first boot

#---- Begin -- Run this in the Installer environment ----

# Adjustments to the host's environment go here
#  Note: The root of the host's environment is /tmp/root

     autostack_bootstrap_server="autostack.local"
autostack_bootstrap_server_path="/mnt/hpsan/pxe"
             autostack_base_dir="/tmp/root/etc/autostack" # /etc/autostack in host
              autostack_log_dir="/tmp/root/var/log/autostack"
              first_boot_script="$autostack_base_dir/first_boot"

# Collect some information about the installer environment so we can do
# some retrospective debugging.
mkdir -pv           "$autostack_base_dir" "$autostack_log_dir"
uname -a          > "$autostack_log_dir"/installer_env--uname_-a.log
set               > "$autostack_log_dir"/installer_env--set.log
env               > "$autostack_log_dir"/installer_env--env.log
mount             > "$autostack_log_dir"/installer_env--mount.log
ifconfig -a       > "$autostack_log_dir"/installer_env--ifconfig_-a.log
route -n          > "$autostack_log_dir"/installer_env--route_-n.log
netstat -planto   > "$autostack_log_dir"/installer_env--netstat_-planto.log
ping "$autostack_bootstrap_server" -c 2 > "$autostack_log_dir"/installer_env--ping_"$autostack_bootstrap_server"_-c_2.log
cp /etc/resolv.conf "$autostack_log_dir"
cp /etc/hosts       "$autostack_log_dir"

# Introduce our hook into the XenServer first boot mechanism
touch     "$first_boot_script"
chmod +x  "$first_boot_script"
ln -vf    "$first_boot_script" "/tmp/root/etc/firstboot.d/96-autostack_first_boot"

# Change extlinux.conf to use xe-serial
sed -i 's/^default xe$/default xe-serial/' /tmp/root/boot/extlinux.conf

#---- End -- Run this in the Installer environment ----


#---- Begin -- Our hook, run this in the host environment ----
# Variables are interpolated in this section
# Useful for passing things in from the installer environment.
cat <<EOF > "$first_boot_script"
#!/bin/bash

# This script is generated in the installer environment.
# Generated by ${BASH_SOURCE##*/} ($USER@$HOSTNAME)
#           at $(date) ($(date +%s))

# Inherit some variables defined in the installer environment.
autostack_bootstrap_server="$autostack_bootstrap_server"
autostack_bootstrap_server_path="$autostack_bootstrap_server_path"
autostack_log_dir="${autostack_log_dir}"
autostack_base_dir="${autostack_base_dir}"

EOF

# No variables are interpolated in this section
cat <<'EOF' >> "$first_boot_script"

# SYNOPSIS
# autostack_first_boot - Generic autostack_first_boot init script for XenServer hosts

# DESCRIPTION
#  * Installed by the post-install-config-member script at the tail-end of the
#    install process into /etc/firstboot.d/
#  * Takes no arguments - FIXME/TODO, we need a deployment server seed info.
#  * Executes scripts specific for the host on which this is run from the
#    location named in 
#    $autostack_bootstrap_server:/$autostack_bootstrap_server_path/hosts/$HOSTNAME/etc/autostack/*.
#  * Scripts are collated in C order. Prefixing them with a number to indicate
#    order is a good enough guarantee.

# -----------------------------------------------------------------------------
# Script header
# -----------------------------------------------------------------------------

autostack_log_dir="${autostack_log_dir#/tmp/root}";   mkdir -pv "$autostack_log_dir"
autostack_base_dir="${autostack_base_dir#/tmp/root}"; mkdir -pv "$autostack_base_dir"
first_boot_script="$autostack_base_dir/first_boot"
autostack_env_logfile="$autostack_log_dir/first_boot.env.log"

THIS_SCRIPT="${BASH_SOURCE##*/}"
FORCE="$FORCE"
VERBOSE="$VERBOSE"

first_boot_logfile="$autostack_log_dir/first_boot.log"

if [[ -t 0 ]]; then
  clear
  exec >> >(grep --line-buffered -vi '^date +%FT%X' | tee -a "$first_boot_logfile") 2>&1
else
  exec > >(tee -a "$first_boot_logfile") 2>&1
fi

function say  { tput bold; tput setaf 7; echo "$@"; tput sgr0; }
function tput { command tput "$@" || true; }

set -a
set +xv

txtbld=$(tput bold)
txtrst=$(tput sgr0)
bold_red=${txtbld}$(tput setaf 1)
bold_green=${txtbld}$(tput setaf 2)
bold_yellow=${txtbld}$(tput setaf 3)
bold_red=${txtbld}$(tput setaf 1)

PS4='$txtrst$bold_red$(date +%FT%X) $HOSTNAME ${BASH_SOURCE##*/} : ${FUNCNAME:--}:${LINENO}$txtrst '

LOGDIR="$autostack_log_dir"
PATH="$autostack_base_dir:$PATH"
TIMEFORMAT=$'Real %R\tUser %U\tSys %S\tCPU %P'

shopt -s sourcepath nullglob
shopt -s extglob || true

mkdir -pv "$autostack_base_dir" "$autostack_log_dir"

echo "Script        : $0 ($(readlink -f $0))"
echo "  Args        : $@"
echo "  Started     : $(date +%s) ($(date))"
echo "  HOSTNAME    : $HOSTNAME"
echo "  Script Dir  : ${0%/*}"
echo "  PWD         : $PWD"
echo "  PID         : $$"
echo "  PPID        : $PPID"
echo "  Environment : $autostack_env_logfile"
{ 
  echo '#---- set ----'; 
  set; 
  echo '#---- env ----'; 
  env; 
} > "$autostack_env_logfile"


set -x  # turn on debugging / ensure PS4 is emitted.
(( VERBOSE == 1 )) && set -v  # Print shell input lines as they are read.
set -e  # abort on any error.
set -u  # treat unset variables as an error.

# ---- Discover our real hostname ----
if [[ $HOSTNAME = localhost* ]]; then
  # Simple reverse DNS lookup in the absence of dig(1), nslookup(1)
  mgmt_ip=$( xe host-list params=address --minimal )
  hostname=$( perl -MSocket -le 'print scalar gethostbyaddr inet_aton(shift), AF_INET' "$mgmt_ip" )
  if [[ $hostname ]]; then
    hostname=$( getent hosts "$mgmt_ip" | awk '{print $2}' )
  fi
  HOSTNAME="$hostname"
fi

if [[ $HOSTNAME != *.* ]] && _hostname=$(hostname -f) && [[ $_hostname = *.* ]]; then
  HOSTNAME="$_hostname"
fi

if [[ $HOSTNAME != *.* ]] && _hostname=$(< /etc/hostname) && [[ $_hostname = *.* ]]; then
  HOSTNAME="$_hostname"
fi

if [[ $HOSTNAME = *.* ]]; then
  hostname "$HOSTNAME"
  DOMAINNAME="${HOSTNAME#*.}"
  HOSTNAME="${HOSTNAME%%.*}"
fi
[[ $HOSTNAME ]] && echo "$HOSTNAME" > /etc/hostname
if ! grep -iq "$HOSTNAME" /etc/hosts; then
  cat <<'EOHOSTS' >> /etc/hosts
127.0.1.1   $HOSTNAME.$DOMAINNAME  $HOSTNAME
EOHOSTS
fi

DOMAINNAME="${DOMAINNAME:-$(hostname -d)}"
DOMAINNAME="${DOMAINNAME:-localdomain}"
[[ $DOMAINNAME ]] && echo "$DOMAINNAME" > /etc/domainname

hostname "$HOSTNAME"
hostname -s
hostname -f
hostname -d

# -----------------------------------------------------------------------------
# Mounting location of autostack_bootstrap_scripts
#  i.e. $autostack_bootstrap_server:$autostack_bootstrap_server_path/hosts/"$HOSTNAME"
# -----------------------------------------------------------------------------

temp_dir="$(mktemp -d -p /mnt -t autostack_mount_XXXXXXXXXX)";
mount "$autostack_bootstrap_server":/"$autostack_bootstrap_server_path"/hosts "$temp_dir"

echo "autostack Host Directories: $temp_dir"/*

_hostfqdn="$(hostname -f)"
if [[ -d $temp_dir/$_hostfqdn && -r $temp_dir/$_hostfqdn ]]; then
  # host_dir ~ /path/to/hostname.domain.tld
  host_dir="$temp_dir/$_hostfqdn";

elif [[ -d $temp_dir/$HOSTNAME && -r $temp_dir/$HOSTNAME ]]; then
  # host_dir ~ /path/to/hostname
  host_dir="$temp_dir/$HOSTNAME";

elif [[ -d $temp_dir/$DOMAINNAME && -r $temp_dir/$DOMAINNAME ]]; then
  # host_dir ~ /path/to/domain.tld
  host_dir="$temp_dir/$DOMAINNAME";

elif [[ -d $temp_dir/DEFAULT && -r $temp_dir/DEFAULT ]]; then
  # host_dir ~ /path/to/DEFAULT
  host_dir="$temp_dir/DEFAULT";
fi

if [[ -d $temp_dir/COMMON && -r $temp_dir/COMMON ]]; then
  rsync -avuPEHK --delay-updates --no-owner --no-group --no-dirs --chmod=u+rwx,go-rwx "$temp_dir/COMMON/" /
fi

echo "autostack host directory : $host_dir"
rsync -avuPEHK --delay-updates --no-owner --no-group --no-dirs --chmod=u+rwx,go-rwx "$host_dir"/ /

umount -v "$temp_dir" && rmdir -v "$temp_dir/"

# -----------------------------------------------------------------------------
# Begin executing tasks in $autostack_base_dir
# -----------------------------------------------------------------------------

# ---- Source the host.conf file for our environment variables ----
set -a
[[ -f "$autostack_base_dir"/host.conf ]] && source "$autostack_base_dir"/host.conf
set +a

autostack_state_dir="$autostack_log_dir/$THIS_SCRIPT"
mkdir -pv "$autostack_state_dir"

# ---- Execute all the *.pi  scripts in $autostack_base_dir ----
set +vx
echo "# $(printf "%.s-" {1..73})"
echo "# Started task execution."
echo "# $(printf "%.s-" {1..73})"

task_number=0

for script in "$autostack_base_dir"/*.pi; do

  (( task_number++ ))
  script_state="$autostack_state_dir/${script##*/}.exit_code"
  if [[ -z $FORCE ]] && [[ -e $script_state ]]; then
    last_exit_code=$(< $script_state)
    if (( $last_exit_code == 0 )); then
      printf "# %s .. skipping, already complete\n" "$script"
      continue
    fi
  fi

  say "# $(printf "%.s-" {1..73})"
  say "# Script    : $script"
  say "#   Task #  : $task_number"
  say "#   Args    : $@"
  say "#   BEGIN   : $(date +%s) ($(date))"
  say "# $(printf "%.s-" {1..73})"

  begin_time="$(date +%s)"
  chmod -v +x "$script" && time { "$script" "$@"; }
  exit_code=$?
  end_time="$(date +%s)"
  echo "$exit_code" > "$script_state"
  logger "Finished executing '$script' : $exit_code"

  say "# $(printf "%.s-" {1..73})"
  say "# Script    : $script"
  say "# Exit Code : $exit_code"
  say "# END       : $(date +%s) ($(date))"
  say "# Duration  : $(( end_time - begin_time )) secs"
  say "# $(printf "%.s-" {1..73})"
  say ""
done

echo "# $(printf "%.s-" {1..73})"
echo "# Finished task execution."
echo "# $(printf "%.s-" {1..73})"
echo
set +exva

# -----------------------------------------------------------------------------

echo "# $(printf "%.s-" {1..73})"
echo "# Task execution summary ."
echo "# $(printf "%.s-" {1..73})"

task_number=0
for script in "$autostack_base_dir"/*.pi; do
  (( task_number++ ))
  script_state="$autostack_state_dir/${script##*/}.exit_code"
  if [[ -e $script_state ]]; then
    last_exit_code=$(< $script_state)
    if (( last_exit_code == 0 )); then
      status="${bold_green}OK${txtrst}"
    else
      status="${bold_red}??${txtrst}"
    fi
  else
    last_exit_code='-1'
    status='Not OK'
  fi

  script_desc=$(printf "%.s." {1..54})
  script_desc="${script} ${script_desc:${#script}}"
  echo -ne '#  '
  say "$(printf "%3s.  %s : %2s  %2s" "$task_number" "$script_desc" "$last_exit_code" "$status")"
done
echo "# $(printf "%.s-" {1..73})"

# -----------------------------------------------------------------------------
EOF

#---- End -- Run this in the host environment ----

